package com.practice.tenth;

import java.security.PublicKey;

//Вам необходимо создать двоичное дерево поиска, изображенное на картинке выше.
//        Для этого создайте класс “Узел” (англ. Node ), который будет содержать поля-ссылки
//        на два других узла (левый и правый сын).
//        Затем, создайте корневой (англ. root ) узел (со значением 20).
//        После этого, необходимо реализовать метод, который будет добавлять новые узлы в
//        ваше дерево.
//        Этот метод должен принимать в качестве аргументов добавляемое значение и ссылку
//        на корень дерева. Проходясь по дереву, он должен вставлять новый узел в
//        правильное место дерева.
//        Когда двоичное дерево, изображенное выше, будет создано, необходимо используя
//        рекурсию вывести в консоль все числа из этого двоичного дерева поиска в
//        отсортированном виде. Ваше решение должно работать для любого корректного
//        двоичного дерева поиска.
//        Этому методу необходимо передавать на вход ссылку на корень дерева.
public class Node {
    private Node leftSon;
    private Node rightSon;
    private int value;

    Node root = new Node(20);
    public Node (int value){
        if (this.value >= root.value )
            this.value = rightSon.value;
        else this.value = leftSon.value;
    }


    public int getValue() {
        return value;
    }
}

